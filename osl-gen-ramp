#!/usr/bin/python3
#+
# This script generates an Open Shading Language shader that does a
# mapping of an input value to an output value. The mapping can be
# piecewise-linear, or it can be a spline curve. Invoke this script as
# follows:
#
#     osl-gen-ramp --name=«name» --segments=«segments» [--spline=«basis»] --type=«type»
#
# where «name» is the name to give to the shader, «segments» is 1 less
# than the integer number of input/output value pairs that will be
# specified, «basis» is the spline basis to use, and «type» is the
# type of value to interpolate.
#
# If «basis» is not specified, a piecewise-linear ramp is created;
# «segments» must be at least 1 in this case. Various spline bases
# impose further restrictions: check the OSL documentation for
# details.
#
# Copyright 2017-2019 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under CC-BY <http://creativecommons.org/licenses/by/4.0/>.
#-

import sys
import getopt

opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ["end-repeat=", "name=", "segments=", "spline=", "type="]
  )
nr_segs = None
end_repeat = 1
shader_name = None
spline_type = None
op_type = None
for keyword, value in opts :
    if keyword == "--end-repeat" :
        end_repeat = int(value)
        if end_repeat < 1 :
            raise getopt.GetoptError("--end-repeat value must be ≥ 1")
        #end if
    elif keyword == "--name" :
        shader_name = value
    elif keyword == "--segments" :
        nr_segs = int(value)
        assert nr_segs > 0
    elif keyword == "--spline" :
        spline_type = value
    elif keyword == "--type" :
        op_type = value
    #end if
#end for
if nr_segs == None or shader_name == None or op_type == None :
    raise getopt.GetoptError("missing --name, --segments or --type value")
#end if
is_closure = op_type.startswith("closure")
  # Need to do some workarounds for limitations on arithmetic with closures:
  # no subtraction of closures and no division by anything, even though
  # addition of closures and multiplication by numbers is OK
if end_repeat > 1 and spline_type == None :
    raise getopt.GetoptError("--end-repeat only allowed with --spline")
#end if
if is_closure and spline_type != None :
    raise getopt.GetoptError("--spline not allowed with closures")
#end if
arg_default = ("%(type)s(0)", "0")[is_closure] % {"type" : op_type}

if spline_type != None :
    body = \
        (
            "    float xpts[%(nrpts)d] = {%(xpts)s};\n"
            "    %(type)s ypts[%(nrpts)d] = {%(ypts)s};\n"
            "    float x = splineinverse(\"%(basis)s\", In, xpts);\n"
            "    Out = spline(\"%(basis)s\", x, ypts);\n"
        %
            {
                "basis" : spline_type,
                "type" : op_type,
                "nrpts" : nr_segs + 1 + 2 * (end_repeat - 1),
                "xpts" :
                    ", ".join
                      (
                            ["In0"] * (end_repeat - 1)
                        +
                            ["In%d" % i for i in range(nr_segs + 1)]
                        +
                            ["In%d" % nr_segs] * (end_repeat - 1)
                      ),
                "ypts" :
                    ", ".join
                      (
                            ["Out0"] * (end_repeat - 1)
                        +
                            ["Out%d" % i for i in range(nr_segs + 1)]
                        +
                            ["Out%d" % nr_segs] * (end_repeat - 1)
                      ),
            }
        )
else :
    body = \
        (
                "    if (In < In0)\n"
                "        Out = Out0;\n"
                "%(body_rest)s"
                "    else\n"
                "        Out = Out%(nr_segs)d;\n"
            %
                {
                    "body_rest" :
                        "".join
                          (
                            "    else if (In < In%(j)d)\n"
                            "        Out = Out%(i)d + (Out%(j)d %(subterm)s) *"
                                " %(openparen)s(In - In%(i)d) / (In%(j)d - In%(i)d)%(closeparen)s;\n"
                            %
                                {
                                    "i" : i,
                                    "j" : i + 1,
                                    "subterm" :
                                            (
                                                "- Out%(i)d",
                                                "+ (-1 * Out%(i)d)",
                                            )[is_closure]
                                        %
                                            {"i" : i},
                                    "openparen" : ("", "(")[is_closure],
                                    "closeparen" : ("", ")")[is_closure],
                                }
                            for i in range(nr_segs)
                          ),
                    "nr_segs" : nr_segs,
                }
        )
#end if

sys.stdout.write \
  (
        "shader %(name)s\n"
        "  (\n"
        "    float In = 0.0,\n"
        "    output %(type)s Out = %(default)s"
        "%(args)s\n"
        "  )\n"
        "  /* generated by osl-gen-ramp. */\n"
        "  {\n"
        "%(body)s"
        "  } /*%(name)s*/\n"
    %
        {
            "name" : shader_name,
            "type" : op_type,
            "default" : arg_default,
            "args" :
                "".join
                  (
                        ",\n"
                        "    float In%(i)d = %(in_default).3f,%(incond)s\n"
                        "    %(type)s Out%(i)d = %(out_default)s"
                    %
                        {
                            "i" : i,
                            "type" : op_type,
                            "incond" :
                                (
                                    lambda : "",
                                    lambda : " /* must be < In%d */" % (i + 1),
                                )[i < nr_segs](),
                            "in_default" : i / nr_segs,
                            "out_default" : arg_default,
                        }
                    for i in range(nr_segs + 1)
                  ),
            "body" : body,
        }
  )
