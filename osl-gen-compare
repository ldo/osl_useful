#!/usr/bin/python3
#+
# This script generates an Open Shading Language shader that returns
# as its output a copy of one of two inputs, depending on a comparison
# between two other inputs. Invoke it as follows:
#
#     osl-gen-compare --comptype=«comptype» --seltype=«seltype» --name=«name» «op»
#
# where «comptype» is the type for the inputs to be compared, and
# «seltype» is the type of the inputs to be selected from, as well
# as the type of the output. «name» is the name to give the shader,
# and «op» is the comparison to perform, one of the codes “eq”, “ge”,
# “gt”, “le”, “lt” or “ne”.
#
# Copyright 2016-2020 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under CC-BY <http://creativecommons.org/licenses/by/4.0/>.
#-

import sys
import getopt

ops = \
    {
        "eq" : "==",
        "ne" : "!=",
        "lt" : "<",
        "le" : "<=",
        "gt" : ">",
        "ge" : ">=",
    }

opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ["comptype=", "name=", "seltype="]
  )
comptype = None
seltype = None
name = None
for keyword, value in opts :
    if keyword == "--comptype" :
        comptype = value
    elif keyword == "--name" :
        name = value
    elif keyword == "--seltype" :
        seltype = value
    #end if
#end for
if comptype == None or name == None or seltype == None :
    raise getopt.GetoptError("missing --comptype, --name or --seltype value")
#end if
if len(args) != 1 :
    raise getopt.GetoptError("need exactly one arg, the comparison operator")
#end if
op = args[0]
if op not in ops :
    raise getopt.GetoptError("op not one of %s" % ",".join(k for k in ops))
#end if
is_closure = seltype.startswith("closure")

sys.stdout.write \
  (
        "shader %(name)s\n"
        "  (\n"
        "    %(comptype)s Cmp1 = %(comptype)s(0),\n"
        "    %(comptype)s Cmp2 = %(comptype)s(0),\n"
        "    %(seltype)s Arg1 = %(seldefault)s,\n"
        "    %(seltype)s Arg2 = %(seldefault)s,\n"
        "    output %(seltype)s Out = %(seldefault)s\n"
        "  )\n"
        "  /* generated by osl-gen-compare. */\n"
        "  {\n"
        "%(expr)s"
        "  } /*%(name)s*/\n"
    %
        {
            "name" : name,
            "comptype" : comptype,
            "seltype" : seltype,
            "seldefault" :
                [
                    lambda : "%s(0)" % seltype,
                    lambda : "0",
                ][is_closure](),
            "expr" :
                    [
                        "    Out = Cmp1 %(op)s Cmp2 ? Arg2 : Arg1;\n",
                        # conditional expressions don’t seem to be allowed on closures
                        "    if (Cmp1 %(op)s Cmp2)\n"
                        "      {\n"
                        "        Out = Arg2;\n"
                        "      }\n"
                        "    else\n"
                        "      {\n"
                        "        Out = Arg1;\n"
                        "      } /*if*/\n",
                    ][is_closure]
                %
                    {
                        "op" : ops[op],
                    },
        }
  )
