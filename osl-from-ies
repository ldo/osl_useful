#!/usr/bin/python3
#+
# This script generates an OSL shader that outputs a directional
# intensity function corresponding to a given light definition in
# IESNA LM-63 (aka “IES”) format. Invoke it as follows:
#
#     osl-from-ies --name=«name» [--encoding=«encoding»] «ies-file-name»
#
# where «name» is the name to give to the shader, «ies-file-name»
# is the name of the file containing the IES light definition,
# and «encoding» is the character encoding to use for reading the
# IES file (defaults to UTF-8 if omitted).
#
# The OSL shader definition is written to standard output.
#
# Various online versions of spec:
# <https://seblagarde.wordpress.com/2014/11/05/ies-light-format-specification-and-reader/>
# <http://www.vuw.ac.nz/architecture-onlineteaching/tutorials/lightscape/extras/ies_standard_format.html>
#
# Copyright 2019-2020 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under CC-BY <http://creativecommons.org/licenses/by/4.0/>.
#-

import sys
import os
import math
import enum
import re
import getopt

DEG = math.pi / 180

INTENSITY_CONV_FACTOR = 4 * math.pi / 177.83
  # conversion factor taken from intern/cycles/util/util_ies.cpp in Blender source.
  # See there for derivation of this value.

class IESLight :

    class FormatError(Exception) :

        def __init__(self, msg) :
            self.msg = msg
        #end __init__

    #end FormatError

    class GEOM(enum.IntEnum) :
        VERTICAL_WHEN_AIMED_DOWN = 1
        HORIZONTAL_WHEN_AIMED_DOWN_OR_ROTATED = 2
        HORIZONTAL_WHEN_AIMED_DOWN_NOT_ROTATED = 3
    #end GEOM

    class UNITS(enum.IntEnum) :
        FEET = 1
        METRES = 2
    #end UNITS

    class PHOTOMETRIC(enum.IntEnum) :
        TYPE_C = 1
        TYPE_B = 2
        TYPE_A = 3
    #end PHOTOMETRIC

    def __init__(self, **kwargs) :
        self._attrs = tuple(sorted(kwargs.keys()))
        for key in kwargs :
            setattr(self, key, kwargs[key])
        #end for
    #end __init__

    def __repr__(self) :
        return \
            (
                "%s(%s)"
            %
                (
                    type(self).__name__,
                    ", ".join("%s = %s" % (k, repr(getattr(self, k))) for k in self._attrs),
                )
            )
    #end __repr__

    @classmethod
    def from_stream(celf, fl, ref_filename = None, process_photometric = True) :
        "parses IES data from the file-like object fl, and returns an IESLight" \
        " object. ref_filename is used to interpret relative pathnames within" \
        " the file, namely the TILT=«filename» option."

        FormatError = celf.FormatError

        def split_items(line) :
            return \
                re.split("[\\,\\s]+", line.strip())
        #end split_items

        def read_multi_line(nr_items) :
            # reads a line and any following continuation lines as necessary
            # to make up the specified number of items, returning it all as
            # one line.
            line = ""
            while True :
                next_line = fl.readline()
                if next_line == "" :
                    break
                next_line = next_line.rstrip("\n")
                line += " " + next_line
                if len(split_items(line)) >= nr_items :
                    break
            #end while
            return \
                line
        #end read_multi_line

        def read_items_line(cnv) :
            line = read_multi_line(len(cnv))
            raw_items = split_items(line)
            if len(raw_items) != len(cnv) :
                raise FormatError \
                  (
                        "wrong nr items on line: expected %d, got %d: %s"
                    %
                        (len(cnv), len(raw_items), repr(line))
                  )
            #end if
            items = []
            for i in range(len(cnv)) :
                try :
                    items.append(cnv[i](raw_items[i]))
                except ValueError :
                    raise FormatError \
                      (
                        "bad %s item[%d] on line: %s" % (cnv[i].__name__, i, repr(line))
                      )
                #end try
            #end for
            return \
                items
        #end read_items_line

        def ensure_increasing(items, what) :
            if not all(items[i] < items[i + 1] for i in range(len(items) - 1)) :
                raise FormatError("%s must all be increasing: %s" % (what, repr(items)))
            #end if
            return \
                items
        #end ensure_increasing

        def enum_conv(enumtype) :
            # defines a conversion function that takes an integer and
            # returns enumtype.
            conv = lambda x : enumtype(int(x))
            conv.__name__ = enumtype.__name__ # for error messages
            return \
                conv
        #end enum_conv

        def parse_tilt(new_fl = None) :
            nonlocal fl
            if new_fl != None :
                save_fl = fl
                fl = new_fl
            else :
                save_fl = None
            #end if
            geom_type = read_items_line([enum_conv(celf.GEOM)])[0]
            nr_tilts = read_items_line([int])[0]
            tilt_angles = ensure_increasing(read_items_line([float] * nr_tilts), "tilt angles")
            tilt_factors = read_items_line([float] * nr_tilts)
            if new_fl != None :
                fl = save_fl
            #end if
            return \
                {
                    "geom_type" : geom_type,
                    "nr_tilts" : nr_tilts,
                    "tilt_angles" : tilt_angles,
                    "tilt_factors" : tilt_factors,
                }
        #end parse_tilt

        def expand_phototype_ab(vert_angles, hor_angles, candela_values) :
            # following same processing that Cycles does.
            # Args are lists which are updated in-place.

            # transpose hor ↔ vert
            temp = list \
              (
                list
                  (
                    candela_values[j][i]
                    for j in range(len(hor_angles))
                  )
                for i in range(len(vert_angles))
              )
            candela_values[:] = temp
            temp = vert_angles[:]
            vert_angles[:] = hor_angles
            hor_angles[:] = temp
            nr_vert_angles = len(vert_angles)
            nr_hor_angles = len(hor_angles)

            # normalize/expand vert angles
            if vert_angles[-1] != 90 :
                raise FormatError \
                  (
                    "type-a/b vertical angles don’t end with 90: %.3f" % vert_angles[-1]
                  )
            #end if
            if vert_angles[0] == 0 :
                vert_angles[:] = \
                    (
                        list(90 - vert_angles[i] for i in range(nr_vert_angles - 1, 0, -1))
                    +
                        list(90 + θ for θ in vert_angles)
                    )
                for i in range(nr_hor_angles) :
                    candela_values[i][:] = \
                        (
                            list(candela_values[i][j] for j in range(nr_vert_angles - 2, -1, -1))
                        +
                            candela_values[i]
                        )
                #end for
            elif vert_angles[0] == -90 :
                vert_angles[:] = list(90 + θ for θ in vert_angles)
            #end if

            # normalize/expand hor angles
            if hor_angles[-1] != 90 :
                raise FormatError \
                  (
                    "type-a/b horizontal angles don’t end with 90: %.3f" % hor_angles[-1]
                  )
            #end if
            if hor_angles[0] == 0 :
                hor_angles[:] = \
                    (
                        list(90 - hor_angles[i] for i in range(nr_hor_angles - 1, 0, -1))
                    +
                        list(90 + θ for θ in hor_angles)
                    )
                candela_values[:] = \
                    (
                        list(list(candela_values[i]) for i in range(nr_hor_angles - 1, 0, -1))
                    +
                        candela_values
                    )
            elif hor_angles[0] == -90 :
                hor_angles[:] = list(90 + θ for θ in hor_angles)
            #end if
            hor_angles.append(360)
            candela_values.append(list(candela_values[0]))
        #end expand_phototype_ab

        def expand_phototype_c(vert_angles, hor_angles, candela_values) :
            # following same processing that Cycles does.
            # Args are lists which are updated in-place.

            # normalize vert angles
            if vert_angles[0] == 90 and vert_angles[-1] == 180 :
                vert_angles[:] = list(180 - θ for θ in vert_angles)
            #end if
            if vert_angles[0] != 0 :
                raise FormatError \
                  (
                    "type-c vertical angles don’t start with 0: %.3f" % vert_angles[0]
                  )
            #end if

            # normalize/expand hor angles
            nr_hor_angles = len(hor_angles)
            if hor_angles[0] == 90 :
                hor_angles[:] = list(θ - 90 for θ in hor_angles)
            #end if
            if hor_angles[0] != 0 :
                raise FormatError \
                  (
                    "type-c horizontal angles don’t start with 0: %.3f" % hor_angles[0]
                  )
            #end if
            if nr_hor_angles == 1 :
                hor_angles.append(360)
                candela_values.append(list(candela_values[0]))
            #end if
            for hi_angle in (90, 180) :
                if hor_angles[-1] == hi_angle :
                    nr_hor_angles = len(hor_angles)
                    hor_angles.extend \
                      (list(
                        2 * hi_angle - hor_angles[i]
                        for i in range(nr_hor_angles - 2, -1, -1)
                      ))
                    candela_values.extend \
                      (list(
                        list(candela_values[i])
                        for i in range(nr_hor_angles - 2, -1, -1)
                      ))
                #end if
            #end for
            if hor_angles[-1] != 360 :
                # put in missing 360° angle with same value as 0°; Cycles
                # does additional check about angle step size, but why bother?
                hor_angles.append(360)
                candela_values.append(list(candela_values[0]))
            #end if
        #end expand_phototype_c

    #begin from_stream
        tilt = None
        while True :
            line = fl.readline()
            if line == "" : # EOF
                raise FormatError("“TILT=” line not found")
            #end if
            line = line.rstrip("\n")
            # ignore everything prior to TILT= line for now
            if line.startswith("TILT=") :
                line = line[5:]
                if line == "INCLUDE" :
                    tilt = parse_tilt()
                elif line != "NONE" :
                    if ref_filename != None :
                        tilt_filename = os.path.realpath \
                          (
                            os.path.join(os.path.split(ref_filename)[0], line)
                          )
                         # interpret relative path as relative to directory containing ref_filename
                    else :
                        tilt_filename = line
                    #end if
                    tilt = parse_tilt(open(tilt_filename, "rt"))
                #end if
                break
            #end if
        #end while
        items = {"tilt" : tilt}
        item_defs = \
            (
                ("nr_lamps", int),
                ("lumens_per_lamp", float),
                ("candela_multiplier", float),
                ("nr_vert_angles", int),
                ("nr_hor_angles", int),
                ("photometric_type", enum_conv(celf.PHOTOMETRIC)),
                ("units_type", enum_conv(celf.UNITS)),
                ("width", float),
                ("length", float),
                ("height", float),
            )
        item_vals = read_items_line(tuple(i[1] for i in item_defs))
        for i in range(len(item_defs)) :
            items[item_defs[i][0]] = item_vals[i]
        #end for
        for valname in \
            (
                "nr_lamps",
                "nr_vert_angles",
                "nr_hor_angles",
                # note width, length and height can be zero or negative
            ) \
        :
            val = items[valname]
            if val <= 0 :
                raise FormatError("%s must be positive: %d" % (valname, val))
            #end if
        #end for
        if items["lumens_per_lamp"] == -1 :
            items["lumens_per_lamp"] = None
        elif items["lumens_per_lamp"] <= 0 :
            raise FormatError \
              (
                "invalid lumens per lamp; must be positive or -1: %.3g" % items["lumens_per_lamp"]
              )
        #end if
        item_vals = read_items_line([float] * 3)
        ballast_factor = item_vals[0]
        ballast_photometric_factor = item_vals[1]
        items["input_watts"] = item_vals[2]
        vert_angles = ensure_increasing \
          (
            read_items_line([float] * items["nr_vert_angles"]),
            "vertical angles"
          )
        hor_angles = ensure_increasing \
          (
            read_items_line([float] * items["nr_hor_angles"]),
            "horizontal angles"
          )
        items["vert_angles"] = vert_angles
        items["hor_angles"] = hor_angles
        candela_values = []
        candela_multiplier = \
            items["candela_multiplier"] * ballast_factor * ballast_photometric_factor
        for i in range(items["nr_hor_angles"]) :
            candela_values.append \
              (
                list
                  (
                    x * candela_multiplier
                    for x in read_items_line([float] * items["nr_vert_angles"])
                  )
              )
        #end for
        items["candela_values"] = candela_values
        if process_photometric :
            for valname in ("nr_vert_angles", "nr_hor_angles", "candela_multiplier") :
                # nr vert/hor angles might be invalidated by transposition in type-A/B
                # processing (below); candela_multiplier has been applied, so no longer needed
                del items[valname]
            #end for
            {
                celf.PHOTOMETRIC.TYPE_A : expand_phototype_ab,
                celf.PHOTOMETRIC.TYPE_B : expand_phototype_ab,
                celf.PHOTOMETRIC.TYPE_C : expand_phototype_c,
            }[items["photometric_type"]](vert_angles, hor_angles, candela_values)
        #end if
        return \
            celf(**items)
    #end from_stream

    @classmethod
    def from_file(celf, filename, encoding = "utf-8", process_photometric = True) :
        return \
            celf.from_stream \
              (
                open(filename, "rt", encoding = encoding), filename, process_photometric
              )
    #end from_file

#end IESLight

def cubic_interp(x, a, b, c, d) :
    # generates an expression that does a cubic interpolation from the value x
    # across the control points a, b, c and d.
    return \
        (
                    "0.5"
                " * "
                    "("
                            "("
                                    "(%(d)s + 3 * (%(b)s - %(c)s) - %(a)s)"
                                " * "
                                    "%(x)s"
                            " + "
                                "(2 * %(a)s - 5 * %(b)s + 4 * %(c)s - %(d)s)"
                            ")"
                        " * "
                            "%(x)s"
                    " + "
                        "%(c)s"
                    " - "
                        "%(a)s"
                    ")"
                " * "
                    "%(x)s"
            " + "
                "%(b)s"
        %
            {"a" : a, "b" : b, "c" : c, "d" : d, "x" : x}
        )
#end cubic_interp

#+
# Mainline
#-

encoding = "utf-8"
nr_digits = 3
opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ["encoding=", "name="]
  )
shader_name = None
for keyword, value in opts :
    if keyword == "--encoding" :
        encoding = value
    elif keyword == "--name" :
        shader_name = value
    #end if
#end for
if shader_name == None :
    raise getopt.GetoptError("missing --name")
#end if
if len(args) != 1 :
    raise getopt.GetoptError("need exactly one arg, the input IES file name")
#end if
lum = IESLight.from_file(args[0], encoding = encoding)
#sys.stderr.write("lum = %s\n" % repr(lum)) # debug
nr_vert_angles = len(lum.vert_angles)
nr_hor_angles = len(lum.hor_angles)

num_format = "%%.%df" % nr_digits

def vert_interp(i) :
    coeffs = list \
      (
            "intensities[(%(i)s) * %(nr_vert_angles)d + %(j)s]"
        %
            {"i" : i, "j" : j, "nr_vert_angles" : nr_vert_angles}
        for j in
            (
                "(j == 0 ? 1 : j - 1)",
                "j",
                "min(j + 1, %(n)d)" % {"n" : nr_vert_angles - 1},
                "min(j + 2, %(n)d)" % {"n" : nr_vert_angles - 1},
            )
      )
    return \
        cubic_interp("j_frac", *coeffs)
#end vert_interp

sys.stdout.write \
  (
        "shader %(name)s\n"
        "  (\n"
        "    normal Direction = transform(\"world\", \"object\", N),\n"
          # N is in world coords, transform back to object to allow object transform to apply
        "%(tiltarg)s"
        "    float Strength = 1,\n"
        "    output float Result = 1\n"
        "  )\n"
        "  /* generated by osl-from-ies. */\n"
        "  {\n"
        "    float vert_angles[%(nr_vert_angles)d] = {%(vert_angles)s};\n"
        "    float hor_angles[%(nr_hor_angles)d] = {%(hor_angles)s};\n"
        "    float intensities[%(nr_intensities)d] = {%(intensities)s};\n"
        "%(tiltdefs)s"
        "\n"
        "    float len_xy = hypot(Direction[1], Direction[0]);\n"
        "    float len_xyz = hypot(Direction[2], len_xy);\n"
        "    float theta = atan2(len_xy, - Direction[2]);\n"
          # positive-Z is down, same as Cycles
        "    float phi = atan2(Direction[0], Direction[1]) + M_PI;\n"
        "\n"
        "    int i, j;\n"
        "    float i_frac, j_frac;\n"
        "    i = 0;\n"
        "    while (i < %(nr_hor_angles)d && hor_angles[i] <= phi)\n"
        "      {\n"
        "        ++i;\n"
        "      } /*while*/\n"
        "    if (i == %(nr_hor_angles)d)\n"
        "      {\n"
        "        i = 0;\n" # wrap around
        "      }\n"
        "    else\n"
        "      {\n"
        "        --i;\n" # won’t be zero
        "      } /*if*/\n"
        "    i_frac = (phi - hor_angles[i]) / (hor_angles[i + 1] - hor_angles[i]);\n"
        "    j = 0;\n"
        "    while (j < %(nr_vert_angles)d && vert_angles[j] <= theta)\n"
        "      {\n"
        "        ++j;\n"
        "      } /*while*/\n"
        "    if (j == %(nr_vert_angles)d)\n"
        "      {\n"
        "        j = %(nr_vert_angles)d - 1;\n" # clamp
        "      }\n"
        "    else\n"
        "      {\n"
        "        --j;\n" # won’t be zero
        "      } /*if*/\n"
        "    j_frac =\n"
        "        j >= %(nr_vert_angles)d - 1 ?\n"
        "            0\n"
        "        :\n"
        "            (theta - vert_angles[j]) / (vert_angles[j + 1] - vert_angles[j]);\n"
        "%(tiltindex)s"
        "\n"
        "    float a = %(interp_a)s;\n"
        "    float b = %(interp_b)s;\n"
        "    float c = %(interp_c)s;\n"
        "    float d = %(interp_d)s;\n"
        "%(tiltinterp)s"
        "\n"
        "    Result = max(%(interp_result)s, 0)%(tiltapply)s * Strength;\n"
          # clamp to 0 to avoid negative values
        "  } /*%(name)s*/\n"
    %
        {
            "name" : shader_name,
            "tiltarg" :
                (
                    "",
                    "    float Tilt = 0,\n",
                )[lum.tilt != None],
            "nr_vert_angles" : nr_vert_angles,
            "vert_angles" : ", ".join(num_format % (x * DEG) for x in lum.vert_angles),
            "nr_hor_angles" : nr_hor_angles,
            "hor_angles" : ", ".join(num_format % (x * DEG) for x in lum.hor_angles),
            "nr_intensities" : nr_vert_angles * nr_hor_angles,
            "intensities" :
                # note OSL only allows 1D arrays, no arrays of arrays
                ", ".join
                  (
                    num_format % (lum.candela_values[i][j] * INTENSITY_CONV_FACTOR)
                    for i in range(nr_hor_angles)
                    for j in range(nr_vert_angles)
                  ),
            "tiltdefs" :
                (
                    lambda : "",
                    lambda :
                            "    float tilt_angles[%(nr_tilts)d] = {%(tilt_angles)s};\n"
                            "    float tilt_factors[%(nr_tilts)d] = {%(tilt_factors)s};\n"
                        %
                            {
                                "nr_tilts" : lum.tilt["nr_tilts"],
                                "tilt_angles" :
                                    ", ".join
                                      (
                                        num_format % (x * DEG)
                                        for x in lum.tilt["tilt_angles"]
                                      ),
                                "tilt_factors" :
                                    ", ".join
                                      (
                                        num_format % x
                                        for x in lum.tilt["tilt_factors"]
                                      ),
                            },
                )[lum.tilt != None](),
            "tiltindex" :
                (
                    lambda : "",
                    lambda :
                            "    int k;\n"
                            "    float k_frac;\n"
                            "    k = 0;\n"
                            "    while (k < %(nr_tilts)d && tilt_angles[k] <= Tilt)\n"
                            "      {\n"
                            "        ++k;\n"
                            "      } /*while*/\n"
                            "    if (k == %(nr_tilts)d)\n"
                            "      {\n"
                            "        k = %(nr_tilts)d - 1;\n" # clamp
                            "      }\n"
                            "    else if (k > 0)\n"
                            "      {\n"
                            "        --k;\n"
                            "      } /*if*/\n"
                            "    k_frac =\n"
                            "        k >= %(nr_tilts)d - 1 ?\n"
                            "            0\n"
                            "        :\n"
                            "            (Tilt - tilt_angles[k]) /"
                                " (tilt_angles[k + 1] - tilt_angles[k]);\n"
                        %
                            {
                                "nr_tilts" : lum.tilt["nr_tilts"],
                            },
                )[lum.tilt != None](),
            "interp_a" :
                vert_interp
                  (
                    "(i == 0 ? %(n)d : i - 1)" % {"n" : nr_hor_angles - 2}
                  ),
            "interp_b" : vert_interp("i"),
            "interp_c" : vert_interp("i + 1"),
            "interp_d" :
                vert_interp
                  (
                    "(i + 2 == %(nr_hor_angles)d ? 1 : i + 2)" % {"nr_hor_angles" : nr_hor_angles}
                  ),
            "tiltinterp" :
                (
                    lambda : "",
                    lambda :
                            "    float tilt_factor = %s;\n"
                        %
                            cubic_interp
                              (
                                "k_frac",
                                "tilt_factors[max(k - 1, 0)]",
                                "tilt_factors[k]",
                                    "tilt_factors[min(k + 1, %(n)d)]"
                                %
                                    {"n" : lum.tilt["nr_tilts"] - 1},
                                    "tilt_factors[min(k + 2, %(n)d)]"
                                %
                                    {"n" : lum.tilt["nr_tilts"] - 1},
                              ),
                )[lum.tilt != None](),
            "interp_result" : cubic_interp("i_frac", "a", "b", "c", "d"),
            "tiltapply" :
                (
                    "",
                    " * tilt_factor",
                )[lum.tilt != None],
        }
  )
